<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generating...</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom styles */
        body {
            background-color: #f8f9fa;
        }

        .container {
            margin-top: 50px;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        .step {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .step .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 20px;
        }


        .step p {
            margin: 0;
            /* テキストの余白をリセット */
            line-height: 20px;
            /* テキストの高さを丸と揃える */
        }

        .circle-gray {
            background-color: gray;
        }

        .circle-green {
            background-color: green;
        }

        /* Video container styles */
        #video-container {
            display: none;
            /* 初期状態では非表示 */
            margin-top: 20px;
            text-align: center;
        }

        #video-container video {
            max-width: 100%;
            height: auto;
        }

        /* Divider style */
        .divider {
            border-top: 1px solid #ccc;
            margin-bottom: 20px;
        }
    </style>
</head>
<body data-outputname="<%= output_name %>">
    <div class="container">
        <div class="header">
            <h1>Generating...</h1>
        </div>
        <!-- Divider -->
        <hr class="divider">
        <div class="step">
            <div class="circle circle-green" id="step1"></div>
            <p>Step 1: File Uploading</p>
        </div>
        <div class="step">
            <div class="circle circle-gray" id="step2"></div>
            <p>Step 2: Code Regenerating</p>
        </div>
        <div class="step">
            <div class="circle circle-gray" id="step3"></div>
            <p>Step 3: Video Generating</p>
        </div>
        <div class="step">
            <div class="circle circle-gray" id="step4"></div>
            <p>Step 4: Complete</p>
        </div>
        <hr class="divider">
        <!-- Video container -->
        <div id="video-container">
            <video controls>
                <source src="" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
    </div>
    <!-- Bootstrap JavaScript (optional) -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
    <script>
        let step = 1;
        function show_step() {
            if (step > 0) {
                document.getElementById('step1').classList.remove('circle-gray');
                document.getElementById('step1').classList.add('circle-green');
            }
            if (step > 1) {
                document.getElementById('step2').classList.remove('circle-gray');
                document.getElementById('step2').classList.add('circle-green');
                document.getElementById('step1').style.opacity = 1;
            }
            if (step > 2) {
                document.getElementById('step3').classList.remove('circle-gray');
                document.getElementById('step3').classList.add('circle-green');
                document.getElementById('step2').style.opacity = 1;
            }
            if (step > 3) {
                document.getElementById('step4').classList.remove('circle-gray');
                document.getElementById('step4').classList.add('circle-green');
                document.getElementById('step3').style.opacity = 1;
            }
            //step==1の時、step2のopacityを0-0.5-0の間で変化させる
            if (step == 1) {
                let step2 = document.getElementById('step2');
                step2.style.opacity = 0.5 + 0.5 * Math.sin(new Date().getTime() / 200);
            }
            if (step == 2) {
                let step3 = document.getElementById('step3');
                step3.style.opacity = 0.5 + 0.5 * Math.sin(new Date().getTime() / 200);
            }
            if (step == 3) {
                let step4 = document.getElementById('step4');
                step4.style.opacity = 0.5 + 0.5 * Math.sin(new Date().getTime() / 200);
            }

        }
        setInterval(show_step, 50);

        // .mp4があればURLを取得する
        async function getVideoFile(video_name) {
            const response = await fetch(`/get_video?video_name=${video_name}`);
            //statusが200でない場合はエラーを投げる
            if (!response.ok) {
                return null;
            }
            else {
                //fileを取得する
                const file = await response.blob();
                //URLを生成する
                const fileURL = URL.createObjectURL(file);
                //step3をgreenにする
                step = 3;
                return fileURL;
            }
        }

        // .pyがあればURLを取得する
        async function getPythonFile(python_name) {
            const response = await fetch(`/get_python?code_name=${python_name}`);
            //statusが200でない場合はエラーを投げる
            if (!response.ok) {
                return null;
            }
            else {
                //fileを取得する
                const file = await response.blob();
                //URLを生成する
                const fileURL = URL.createObjectURL(file);
                console.log("python code generated", fileURL)
                //step2をgreenにする
                step = 2;
                return fileURL;
            }
        }

        // Check for Python file and then start checking for Video file
        const output_name = document.body.getAttribute('data-outputname');
        let interval;
        interval = setInterval(async () => {
            const python_name = `${output_name}.py`; // Update with the actual output_name
            const pythonURL = await getPythonFile(python_name);
            if (pythonURL) {
                clearInterval(interval);
                interval = setInterval(async () => {
                    const video_name = `${output_name}.mp4`; // Update with the actual output_name
                    const videoURL = await getVideoFile(video_name);
                    if (videoURL) {
                        clearInterval(interval);
                        document.getElementById('video-container').style.display = 'block';
                        document.querySelector('video').src = videoURL;
                        //step4をgreenにする
                        step = 4;
                    }
                }, 200); // Check every 0.1 second
            }
        }, 200); // Check every 0.1 second
    </script>
</body>
</html>